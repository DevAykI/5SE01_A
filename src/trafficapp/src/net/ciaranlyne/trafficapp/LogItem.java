package net.ciaranlyne.trafficapp;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * File contributors:
 * Ciaran Lyne (w1725430)
 * Aykut Inalan (w1741621)
 */
public class LogItem {

    //Attributes
    private int logID;
    private int userID;
    private String userName;
    private String actionName;
    private int actionTime;
    private int param;

    //Getters
    public int getLogID() {
        return logID;
    }

    public int getUserID() {
        return userID;
    }

    public String getActionName() {
        return actionName;
    }

    public int getActionTime() {
        return actionTime;
    }

    public int getParam() {
        return param;
    }
    
    public String getUsername() {
        return userName;
    }
    
    //Setters
    public void setParam(int param) {
        this.param = param;
    }
    
    //Constructor
    public LogItem(int logID, int userID, String actionName, int actionTime, String userName) {
        //Log item for display
        this.logID = logID;
        this.userID = userID;
        this.actionName = actionName;
        this.actionTime = actionTime;
        this.userName = userName;
        this.param = -1;
    }

    public LogItem(int userID, String actionName, int actionTime, int param) {
        //Log item for login and edit user submit
        this.userID = userID;
        this.actionName = actionName;
        this.actionTime = actionTime;
        this.param = param;
    }

    public LogItem(int userID, String actionName, int actionTime) {
        //Log item for logout submit
        this.userID = userID;
        this.actionName = actionName;
        this.actionTime = actionTime;
    }
    
    /*
    * func: getActionTimeToString
    * use: returns time of action converted from unix timestamp to readable string format
    * params: none
    * returns: String
    */
    public String getActionTimeToString() {
        Date actionDate = new Date((long) actionTime * 1000);
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        
        return dateFormat.format(actionDate);
    }

    
    /*
    * func: submit()
    * use: Submits log to database
    * params: none
    * returns: none
    */
    public void submit() {
        Connection con = DB.getConnection();
        int genLogID = -1;
        String query;
        
        query = "INSERT INTO ta_actionlog (userID, ActionName, actionDateTime) VALUES (?,?,?)";
        // First we prepare the main statement! Time is autoGenerated i believe!
        PreparedStatement statement = null;
        try {
            statement = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            statement.setInt(1, this.userID);
            statement.setString(2, this.actionName);
            statement.setInt(3, actionTime);
            
            //con.setAutoCommit(false);
            int Generated = statement.executeUpdate();
            System.out.println("Executed into Action Log");
            // setting auto-commit to false or it will be on auto-commit mode which could break the code.
            
            if (Generated == 0) {
                throw new SQLException("Creating actionlog failed, no rows affected.");
            }
            
            try (ResultSet GeneratedLogID = statement.getGeneratedKeys()) {
                if (GeneratedLogID.next()) {
                    genLogID = GeneratedLogID.getInt(1);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            

        } catch (Exception e) {
            // handle the database related exception appropriately
            System.out.println("1");
            e.printStackTrace();
        } finally {
            try {
                statement.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        
        PreparedStatement stmt = null;
        
        // need to know what the actionName is
        if (actionName.equals("ActionLoginAttempt")) {
            // when user attempts to login
            System.out.println("Executed into loginAttempt");
            query = "INSERT INTO ta_actionloginattempt (logID, loginSuccessful) VALUES (?,?)";

            try {
                stmt = con.prepareStatement(query);
                stmt.setInt(1, genLogID);
                stmt.setBoolean(2, param == 1);
                stmt.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    stmt.close();
                } catch(Exception e) {
                    e.printStackTrace();
                }
            }
        } else if (actionName.equals("ActionLogout")) {// ActionLoginAttempt ActionLogout 
            // when user attempts to logout
            System.out.println("Executed into logoutAttempt");
            query = "INSERT INTO ta_actionlogout (logID) VALUES (?)";

            try  {
                stmt = con.prepareStatement(query);
                stmt.setInt(1, genLogID);

                stmt.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    stmt.close();
                } catch(Exception e) {
                    e.printStackTrace();
                }
            }
        } else if (actionName.equals("ActionEditUser")) {
            // when user attempts to edit user
            System.out.println("Executed into Edit user");
            query = "INSERT INTO ta_actionedituser (logID, UserID) VALUES (?,?)";
            try {
                stmt = con.prepareStatement(query);
                stmt.setInt(1, genLogID);
                stmt.setInt(2, param);

                stmt.executeUpdate();

            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                try {
                    stmt.close();
                } catch(Exception e) {
                    e.printStackTrace();
                }
            }

        }

        try {
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

}
